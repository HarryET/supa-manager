diff --git a/apps/studio/components/interfaces/Organization/NewOrg/NewOrgForm.tsx b/apps/studio/components/interfaces/Organization/NewOrg/NewOrgForm.tsx
index 5f7d9c3..824ebc0 100644
--- a/apps/studio/components/interfaces/Organization/NewOrg/NewOrgForm.tsx
+++ b/apps/studio/components/interfaces/Organization/NewOrg/NewOrgForm.tsx
@@ -1,18 +1,13 @@
-import { PaymentElement, useElements, useStripe } from '@stripe/react-stripe-js'
-import type { PaymentMethod } from '@stripe/stripe-js'
 import { useQueryClient } from '@tanstack/react-query'
 import { useRouter } from 'next/router'
 import { useEffect, useState } from 'react'
 import toast from 'react-hot-toast'
 
 import { useParams } from 'common'
-import SpendCapModal from 'components/interfaces/Billing/SpendCapModal'
 import Panel from 'components/ui/Panel'
 import { useOrganizationCreateMutation } from 'data/organizations/organization-create-mutation'
 import { invalidateOrganizationsQuery } from 'data/organizations/organizations-query'
-import { BASE_PATH, PRICING_TIER_LABELS_ORG } from 'lib/constants'
-import { getURL } from 'lib/helpers'
-import { Button, IconEdit2, IconHelpCircle, Input, Listbox, Toggle } from 'ui'
+import { Button, Input } from 'ui'
 
 const ORG_KIND_TYPES = {
   PERSONAL: 'Personal',
@@ -42,38 +37,20 @@ interface NewOrgFormProps {
  */
 const NewOrgForm = ({ onPaymentMethodReset }: NewOrgFormProps) => {
   const router = useRouter()
-  const stripe = useStripe()
-  const elements = useElements()
   const queryClient = useQueryClient()
-  const { plan, name, kind, size, spend_cap } = useParams()
+  const { name } = useParams()
 
   const [orgName, setOrgName] = useState(name || '')
-  const [orgKind, setOrgKind] = useState(
-    kind && Object.keys(ORG_KIND_TYPES).includes(kind) ? kind : ORG_KIND_DEFAULT
-  )
-  const [orgSize, setOrgSize] = useState(size || ORG_SIZE_DEFAULT)
+
   // [Joshen] Separate loading state here as there's 2 async processes
   const [newOrgLoading, setNewOrgLoading] = useState(false)
-  const [paymentMethod, setPaymentMethod] = useState<PaymentMethod>()
-
-  // URL param support for passing plan
-  const [dbPricingTierKey, setDbPricingTierKey] = useState(
-    plan && ['free', 'team', 'pro'].includes(plan) ? plan.toUpperCase() : 'FREE'
-  )
-
-  const [showSpendCapHelperModal, setShowSpendCapHelperModal] = useState(false)
-  const [isSpendCapEnabled, setIsSpendCapEnabled] = useState(spend_cap ? Boolean(spend_cap) : true)
 
   useEffect(() => {
     const query: Record<string, string> = {}
-    query.plan = dbPricingTierKey.toLowerCase()
     if (orgName) query.name = orgName
-    if (orgKind) query.kind = orgKind
-    if (orgSize) query.size = orgSize
-    if (isSpendCapEnabled) query.spend_cap = isSpendCapEnabled.toString()
 
     router.push({ query })
-  }, [dbPricingTierKey, orgName, orgKind, orgSize, isSpendCapEnabled])
+  }, [orgName])
 
   const { mutateAsync: createOrganization } = useOrganizationCreateMutation({
     onSuccess: async (org: any) => {
@@ -91,35 +68,16 @@ const NewOrgForm = ({ onPaymentMethodReset }: NewOrgFormProps) => {
     setOrgName(e.target.value)
   }
 
-  function onOrgKindChange(value: any) {
-    setOrgKind(value)
-  }
-
-  function onOrgSizeChange(value: any) {
-    setOrgSize(value)
-  }
-
-  function onDbPricingPlanChange(value: string) {
-    setDbPricingTierKey(value)
-  }
-
   async function createOrg(paymentMethodId?: string) {
-    const dbTier = dbPricingTierKey === 'PRO' && !isSpendCapEnabled ? 'PAYG' : dbPricingTierKey
     try {
       await createOrganization({
         name: orgName,
-        kind: orgKind,
-        tier: ('tier_' + dbTier.toLowerCase()) as
-          | 'tier_payg'
-          | 'tier_pro'
-          | 'tier_free'
-          | 'tier_team'
-          | 'tier_enterprise',
-        ...(orgKind == 'COMPANY' ? { size: orgSize } : {}),
+        kind: 'Rocket Manufacturer',
+        tier: 'tier_enterprise',
+        size: '69420', // gotta have fun yk?
         payment_method: paymentMethodId,
       })
     } catch (error) {
-      resetPaymentMethod()
       setNewOrgLoading(false)
     }
   }
@@ -132,41 +90,9 @@ const NewOrgForm = ({ onPaymentMethodReset }: NewOrgFormProps) => {
       return toast.error('Organization name is empty')
     }
 
-    if (!stripe || !elements) {
-      return console.error('Stripe.js has not loaded')
-    }
     setNewOrgLoading(true)
 
-    if (dbPricingTierKey === 'FREE') {
-      await createOrg()
-    } else if (!paymentMethod) {
-      const { error, setupIntent } = await stripe.confirmSetup({
-        elements,
-        redirect: 'if_required',
-        confirmParams: {
-          return_url: `${getURL()}/new`,
-          expand: ['payment_method'],
-        },
-      })
-
-      if (error || !setupIntent.payment_method) {
-        toast.error(error?.message ?? ' Failed to save card details')
-        setNewOrgLoading(false)
-        return
-      }
-
-      const paymentMethodFromSetup = setupIntent.payment_method as PaymentMethod
-
-      setPaymentMethod(paymentMethodFromSetup)
-      await createOrg(paymentMethodFromSetup.id)
-    } else {
-      await createOrg(paymentMethod.id)
-    }
-  }
-
-  const resetPaymentMethod = () => {
-    setPaymentMethod(undefined)
-    return onPaymentMethodReset()
+    await createOrg()
   }
 
   return (
@@ -221,154 +147,6 @@ const NewOrgForm = ({ onPaymentMethodReset }: NewOrgFormProps) => {
               onChange={onOrgNameChange}
             />
           </Panel.Content>
-          <Panel.Content className="Form section-block--body has-inputs-centered">
-            <Listbox
-              label="Type of organization"
-              layout="horizontal"
-              value={orgKind}
-              onChange={onOrgKindChange}
-              descriptionText="What would best describe your organization?"
-            >
-              {Object.entries(ORG_KIND_TYPES).map(([k, v]) => {
-                return (
-                  <Listbox.Option key={k} label={v} value={k}>
-                    {v}
-                  </Listbox.Option>
-                )
-              })}
-            </Listbox>
-          </Panel.Content>
-
-          {orgKind == 'COMPANY' ? (
-            <Panel.Content className="Form section-block--body has-inputs-centered">
-              <Listbox
-                label="Company size"
-                layout="horizontal"
-                value={orgSize}
-                onChange={onOrgSizeChange}
-                descriptionText="How many people are in your company?"
-              >
-                {Object.entries(ORG_SIZE_TYPES).map(([k, v]) => {
-                  return (
-                    <Listbox.Option key={k} label={v} value={k}>
-                      {v}
-                    </Listbox.Option>
-                  )
-                })}
-              </Listbox>
-            </Panel.Content>
-          ) : (
-            <></>
-          )}
-
-          <Panel.Content>
-            <Listbox
-              label="Pricing Plan"
-              layout="horizontal"
-              value={dbPricingTierKey}
-              // @ts-ignore
-              onChange={onDbPricingPlanChange}
-              // @ts-ignore
-              descriptionText={
-                <>
-                  Select a plan that suits your needs.&nbsp;
-                  <a
-                    className="underline"
-                    target="_blank"
-                    rel="noreferrer"
-                    href="https://supabase.com/pricing"
-                  >
-                    More details
-                  </a>
-                </>
-              }
-            >
-              {Object.entries(PRICING_TIER_LABELS_ORG).map(([k, v]) => {
-                return (
-                  <Listbox.Option key={k} label={v} value={k}>
-                    {v}
-                  </Listbox.Option>
-                )
-              })}
-            </Listbox>
-          </Panel.Content>
-
-          {dbPricingTierKey === 'PRO' && (
-            <>
-              <Panel.Content className="border-b border-panel-border-interior-light dark:border-panel-border-interior-dark">
-                <Toggle
-                  id="spend-cap"
-                  layout="horizontal"
-                  label={
-                    <div className="flex space-x-4">
-                      <span>Spend Cap</span>
-                      <IconHelpCircle
-                        size={16}
-                        strokeWidth={1.5}
-                        className="transition opacity-50 cursor-pointer hover:opacity-100"
-                        onClick={() => setShowSpendCapHelperModal(true)}
-                      />
-                    </div>
-                  }
-                  checked={isSpendCapEnabled}
-                  onChange={() => setIsSpendCapEnabled(!isSpendCapEnabled)}
-                  descriptionText={
-                    <div>
-                      <p>
-                        By default, Pro plan organizations have a spend cap to control costs. When
-                        enabled, usage is limited to the plan's quota, with restrictions when limits
-                        are exceeded. To scale beyond Pro limits without restrictions, disable the
-                        spend cap and pay for over-usage beyond the quota.
-                      </p>
-                    </div>
-                  }
-                />
-              </Panel.Content>
-
-              <SpendCapModal
-                visible={showSpendCapHelperModal}
-                onHide={() => setShowSpendCapHelperModal(false)}
-              />
-            </>
-          )}
-
-          {dbPricingTierKey !== 'FREE' && (
-            <Panel.Content>
-              {paymentMethod?.card !== undefined ? (
-                <div key={paymentMethod.id} className="flex items-center justify-between">
-                  <div className="flex items-center space-x-8">
-                    <img
-                      alt="Card"
-                      src={`${BASE_PATH}/img/payment-methods/${paymentMethod.card.brand
-                        .replace(' ', '-')
-                        .toLowerCase()}.png`}
-                      width="32"
-                    />
-                    <Input
-                      readOnly
-                      className="w-64"
-                      size="small"
-                      value={`•••• •••• •••• ${paymentMethod.card.last4}`}
-                    />
-                    <p className="text-sm tabular-nums">
-                      Expires: {paymentMethod.card.exp_month}/{paymentMethod.card.exp_year}
-                    </p>
-                  </div>
-                  <div>
-                    <Button
-                      type="outline"
-                      icon={<IconEdit2 />}
-                      onClick={() => resetPaymentMethod()}
-                      disabled={newOrgLoading}
-                      className="hover:border-muted"
-                    />
-                  </div>
-                </div>
-              ) : (
-                <PaymentElement />
-              )}
-            </Panel.Content>
-          )}
         </Panel>
       </form>
     </>
diff --git a/apps/studio/components/layouts/SettingsLayout/OrganizationSettingsMenu.tsx b/apps/studio/components/layouts/SettingsLayout/OrganizationSettingsMenu.tsx
index 702d31f..f9ff0eb 100644
--- a/apps/studio/components/layouts/SettingsLayout/OrganizationSettingsMenu.tsx
+++ b/apps/studio/components/layouts/SettingsLayout/OrganizationSettingsMenu.tsx
@@ -10,7 +10,8 @@ const OrganizationSettingsMenu = () => {
     { label: 'General', pathname: `/org/[slug]/general` },
     { label: 'Members', pathname: `/org/[slug]/team` },
     { label: 'Integrations', pathname: `/org/[slug]/integrations` },
-    { label: 'Billing', pathname: `/org/[slug]/billing` },
+    // Note: We don't have billing in Supa-Manager
+    // { label: 'Billing', pathname: `/org/[slug]/billing` },
     { label: 'Usage', pathname: `/org/[slug]/usage` },
     { label: 'Invoices', pathname: `/org/[slug]/invoices` },
     { label: 'OAuth Apps', pathname: `/org/[slug]/apps` },
diff --git a/apps/studio/pages/org/[slug]/billing.tsx b/apps/studio/pages/org/[slug]/billing.tsx
deleted file mode 100644
index f973ac7..0000000
--- a/apps/studio/pages/org/[slug]/billing.tsx
+++ /dev/null
@@ -1,41 +0,0 @@
-import { useParams } from 'common'
-import { BillingSettings } from 'components/interfaces/Organization'
-import { OrganizationLayout } from 'components/layouts'
-import { Loading } from 'components/ui/Loading'
-import { usePermissionsQuery } from 'data/permissions/permissions-query'
-import { useSelectedOrganization } from 'hooks'
-import { useEffect } from 'react'
-import {
-  ORG_SETTINGS_PANEL_KEYS,
-  useOrgSettingsPageStateSnapshot,
-} from 'state/organization-settings'
-import type { NextPageWithLayout } from 'types'
-
-const OrgBillingSettings: NextPageWithLayout = () => {
-  const { panel } = useParams()
-  const snap = useOrgSettingsPageStateSnapshot()
-  const { isLoading: isLoadingPermissions } = usePermissionsQuery()
-  const selectedOrganization = useSelectedOrganization()
-
-  useEffect(() => {
-    const allowedValues = ['subscriptionPlan', 'costControl']
-    if (panel && typeof panel === 'string' && allowedValues.includes(panel)) {
-      snap.setPanelKey(panel as ORG_SETTINGS_PANEL_KEYS)
-      document.getElementById('billing-page-top')?.scrollIntoView({ behavior: 'smooth' })
-    }
-    // eslint-disable-next-line react-hooks/exhaustive-deps
-  }, [panel])
-
-  return (
-    <>
-      {selectedOrganization === undefined && isLoadingPermissions ? (
-        <Loading />
-      ) : (
-        <BillingSettings />
-      )}
-    </>
-  )
-}
-
-OrgBillingSettings.getLayout = (page) => <OrganizationLayout>{page}</OrganizationLayout>
-export default OrgBillingSettings
