diff --git a/apps/studio/components/interfaces/ProjectCreation/ProjectCreation.utils.ts b/apps/studio/components/interfaces/ProjectCreation/ProjectCreation.utils.ts
index 35f51a1..fe4caae 100644
--- a/apps/studio/components/interfaces/ProjectCreation/ProjectCreation.utils.ts
+++ b/apps/studio/components/interfaces/ProjectCreation/ProjectCreation.utils.ts
@@ -1,13 +1,8 @@
-import { AWS_REGIONS, CloudProvider, FLY_REGIONS, Region } from 'lib/constants'
-import { pluckObjectFields } from 'lib/helpers'
+import { K8S_REGIONS, CloudProvider, Region } from 'lib/constants'
 
 export function getAvailableRegions(cloudProvider: CloudProvider): Region {
-  if (cloudProvider === 'AWS') {
-    return process.env.NEXT_PUBLIC_ENVIRONMENT === 'staging'
-      ? pluckObjectFields(AWS_REGIONS, ['SOUTHEAST_ASIA'])
-      : AWS_REGIONS
-  } else if (cloudProvider === 'FLY') {
-    return FLY_REGIONS
+  if (cloudProvider === 'K8S') {
+    return K8S_REGIONS
   }
 
   throw new Error('Invalid cloud provider')
diff --git a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/DeployNewReplicaPanel.tsx b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/DeployNewReplicaPanel.tsx
index cbcc60d..b0b2dd3 100644
--- a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/DeployNewReplicaPanel.tsx
+++ b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/DeployNewReplicaPanel.tsx
@@ -19,15 +19,15 @@ import { useReadReplicasQuery } from 'data/read-replicas/replicas-query'
 import { useOrgSubscriptionQuery } from 'data/subscriptions/org-subscription-query'
 import { useProjectAddonsQuery } from 'data/subscriptions/project-addons-query'
 import { useSelectedOrganization, useSelectedProject } from 'hooks'
-import { AWS_REGIONS, AWS_REGIONS_DEFAULT, AWS_REGIONS_KEYS, BASE_PATH } from 'lib/constants'
+import { K8S_REGIONS, K8S_REGIONS_DEFAULT, K8S_REGIONS_KEYS, BASE_PATH } from 'lib/constants'
 import { WarningIcon } from 'ui-patterns/Icons/StatusIcons'
-import { AVAILABLE_REPLICA_REGIONS, AWS_REGIONS_VALUES } from './InstanceConfiguration.constants'
+import { AVAILABLE_REPLICA_REGIONS, K8S_REGIONS_VALUES } from './InstanceConfiguration.constants'
 
 // [Joshen] FYI this is purely for AWS only, need to update to support Fly eventually
 
 interface DeployNewReplicaPanelProps {
   visible: boolean
-  selectedDefaultRegion?: AWS_REGIONS_KEYS
+  selectedDefaultRegion?: K8S_REGIONS_KEYS
   onSuccess: () => void
   onClose: () => void
 }
@@ -100,9 +100,9 @@ const DeployNewReplicaPanel = ({
     addons?.available_addons.find((addon) => addon.type === 'compute_instance')?.variants ?? []
 
   // Opting for useState temporarily as Listbox doesn't seem to work with react-hook-form yet
-  const [defaultRegion] = Object.entries(AWS_REGIONS).find(
-    ([_, name]) => name === AWS_REGIONS_DEFAULT
-  ) ?? ['ap-southeast-1']
+  const [defaultRegion] = Object.entries(K8S_REGIONS).find(
+    ([_, name]) => name === K8S_REGIONS_DEFAULT
+  ) ?? ['MARS-1']
   // Will be following the primary's instance size for the time being
   const defaultCompute =
     addons?.selected_addons.find((addon) => addon.type === 'compute_instance')?.variant
@@ -118,7 +118,7 @@ const DeployNewReplicaPanel = ({
       : AVAILABLE_REPLICA_REGIONS
 
   const onSubmit = async () => {
-    const regionKey = AWS_REGIONS_VALUES[selectedRegion]
+    const regionKey = K8S_REGIONS_VALUES[selectedRegion]
     if (!projectRef) return console.error('Project is required')
     if (!regionKey) return toast.error('Unable to deploy replica: Unsupported region selected')
 
diff --git a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.constants.ts b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.constants.ts
index fb35237..cb4b6e4 100644
--- a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.constants.ts
+++ b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.constants.ts
@@ -1,8 +1,8 @@
 import { components } from 'data/api'
-import { AWS_REGIONS, AWS_REGIONS_KEYS, PROJECT_STATUS } from 'lib/constants'
+import { K8S_REGIONS_KEYS, PROJECT_STATUS } from 'lib/constants'
 
 export interface Region {
-  key: AWS_REGIONS_KEYS
+  key: K8S_REGIONS_KEYS
   name: string
   region: string
   coordinates: [number, number]
@@ -21,55 +21,8 @@ export const REPLICA_STATUS: {
   INIT_READ_REPLICA_FAILED: 'INIT_READ_REPLICA_FAILED',
 }
 
-// [Joshen] Coordinates from https://github.com/jsonmaur/aws-regions/issues/11
-// In the format of [lon, lat]
-export const AWS_REGIONS_COORDINATES: { [key: string]: [number, number] } = {
-  SOUTHEAST_ASIA: [103.8, 1.37],
-  NORTHEAST_ASIA: [139.42, 35.41],
-  NORTHEAST_ASIA_2: [126.98, 37.56],
-  CENTRAL_CANADA: [-73.6, 45.5],
-  WEST_US: [-121.96, 37.35],
-  EAST_US: [-78.45, 38.13],
-  WEST_EU: [-8, 53],
-  WEST_EU_2: [-0.1, 51],
-  CENTRAL_EU: [8, 50],
-  SOUTH_ASIA: [72.88, 19.08],
-  OCEANIA: [151.2, -33.86],
-  SOUTH_AMERICA: [-46.38, -23.34],
+export const K8S_REGIONS_VALUES: { [key: string]: string } = {
+  MARS: 'MARS-1',
 }
 
-export const FLY_REGIONS_COORDINATES: { [key: string]: [number, number] } = {
-  SOUTHEAST_ASIA: [103.8, 1.37],
-}
-
-export const AWS_REGIONS_VALUES: { [key: string]: string } = {
-  SOUTHEAST_ASIA: 'ap-southeast-1',
-  NORTHEAST_ASIA: 'ap-northeast-1',
-  NORTHEAST_ASIA_2: 'ap-northeast-2',
-  CENTRAL_CANADA: 'ca-central-1',
-  WEST_US: 'us-west-1',
-  EAST_US: 'us-east-1',
-  WEST_EU: 'eu-west-1',
-  WEST_EU_2: 'eu-west-2',
-  CENTRAL_EU: 'eu-central-1',
-  SOUTH_ASIA: 'ap-south-1',
-  OCEANIA: 'ap-southeast-2',
-  SOUTH_AMERICA: 'sa-east-1',
-}
-
-export const FLY_REGIONS_VALUES: { [key: string]: string } = {
-  SOUTHEAST_ASIA: 'sin',
-}
-
-// [Joshen] Just to make sure that we just depend on AWS_REGIONS to determine available
-// regions for replicas. Just FYI - might need to update this if we support Fly in future
-export const AVAILABLE_REPLICA_REGIONS: Region[] = Object.keys(AWS_REGIONS)
-  .map((key) => {
-    return {
-      key: key as AWS_REGIONS_KEYS,
-      name: AWS_REGIONS?.[key as AWS_REGIONS_KEYS],
-      region: AWS_REGIONS_VALUES[key],
-      coordinates: AWS_REGIONS_COORDINATES[key],
-    }
-  })
-  .filter((x) => x.coordinates !== undefined)
+export const AVAILABLE_REPLICA_REGIONS: Region[] = []
diff --git a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.tsx b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.tsx
index e34538d..e44d413 100644
--- a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.tsx
+++ b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.tsx
@@ -18,7 +18,7 @@ import AlertError from 'components/ui/AlertError'
 import { useLoadBalancersQuery } from 'data/read-replicas/load-balancers-query'
 import { Database, useReadReplicasQuery } from 'data/read-replicas/replicas-query'
 import { useReadReplicasStatusesQuery } from 'data/read-replicas/replicas-status-query'
-import { AWS_REGIONS_KEYS } from 'lib/constants'
+import { K8S_REGIONS_KEYS } from 'lib/constants'
 import { timeout } from 'lib/helpers'
 import { useSubscriptionPageStateSnapshot } from 'state/subscription-page'
 import ComputeInstanceSidePanel from '../../Addons/ComputeInstanceSidePanel'
@@ -45,7 +45,7 @@ const InstanceConfigurationUI = () => {
   const [showDeleteAllModal, setShowDeleteAllModal] = useState(false)
   const [showNewReplicaPanel, setShowNewReplicaPanel] = useState(false)
   const [refetchInterval, setRefetchInterval] = useState<number | boolean>(10000)
-  const [newReplicaRegion, setNewReplicaRegion] = useState<AWS_REGIONS_KEYS>()
+  const [newReplicaRegion, setNewReplicaRegion] = useState<K8S_REGIONS_KEYS>()
   const [selectedReplicaToDrop, setSelectedReplicaToDrop] = useState<Database>()
   const [selectedReplicaToRestart, setSelectedReplicaToRestart] = useState<Database>()
 
diff --git a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/MapView.tsx b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/MapView.tsx
index 11c371b..a5c8c30 100644
--- a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/MapView.tsx
+++ b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/MapView.tsx
@@ -24,14 +24,14 @@ import {
 
 import { Database, useReadReplicasQuery } from 'data/read-replicas/replicas-query'
 import { formatDatabaseID } from 'data/read-replicas/replicas.utils'
-import { AWS_REGIONS_KEYS, BASE_PATH, PROJECT_STATUS } from 'lib/constants'
+import { K8S_REGIONS_KEYS, BASE_PATH, PROJECT_STATUS } from 'lib/constants'
 import { AVAILABLE_REPLICA_REGIONS } from './InstanceConfiguration.constants'
 import GeographyData from './MapData.json'
 
 // [Joshen] Foresee that we'll skip this view for initial launch
 
 interface MapViewProps {
-  onSelectDeployNewReplica: (region: AWS_REGIONS_KEYS) => void
+  onSelectDeployNewReplica: (region: K8S_REGIONS_KEYS) => void
   onSelectDropReplica: (database: Database) => void
 }
 
@@ -130,9 +130,8 @@ const MapView = ({ onSelectDeployNewReplica, onSelectDropReplica }: MapViewProps
           {AVAILABLE_REPLICA_REGIONS.map((region) => {
             const dbs =
               databases.filter((database) => database.region.includes(region.region)) ?? []
-            const coordinates = AVAILABLE_REPLICA_REGIONS.find(
-              (r) => r.region === region.region
-            )?.coordinates
+            const coordinates = AVAILABLE_REPLICA_REGIONS.find((r) => r.region === region.region)
+              ?.coordinates
 
             const hasNoDatabases = dbs.length === 0
             const hasPrimary = dbs.some((database) => database.identifier === ref)
diff --git a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureInfo.tsx b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureInfo.tsx
index a1e125f..7eec30c 100644
--- a/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureInfo.tsx
+++ b/apps/studio/components/interfaces/Settings/Infrastructure/InfrastructureInfo.tsx
@@ -24,13 +24,10 @@ import { GenericSkeletonLoader } from 'components/ui/ShimmeringLoader'
 import { useProjectUpgradeEligibilityQuery } from 'data/config/project-upgrade-eligibility-query'
 import { useReadReplicasQuery } from 'data/read-replicas/replicas-query'
 import { useIsFeatureEnabled } from 'hooks'
-import { AWS_REGIONS, FLY_REGIONS } from 'lib/constants'
+import { K8S_REGIONS } from 'lib/constants'
 import { ProjectUpgradeAlert } from '../General/Infrastructure/ProjectUpgradeAlert'
 import InstanceConfiguration from './InfrastructureConfiguration/InstanceConfiguration'
-import {
-  AWS_REGIONS_VALUES,
-  FLY_REGIONS_VALUES,
-} from './InfrastructureConfiguration/InstanceConfiguration.constants'
+import { K8S_REGIONS_VALUES } from './InfrastructureConfiguration/InstanceConfiguration.constants'
 
 const InfrastructureInfo = () => {
   const { ref } = useParams()
@@ -61,13 +58,11 @@ const InfrastructureInfo = () => {
   const message = `Upgrade information:%0A• Manual intervention reason: ${requires_manual_intervention}`
 
   const [regionKey] =
-    project?.cloud_provider === 'AWS'
-      ? Object.entries(AWS_REGIONS_VALUES).find(([key, region]) => region === project?.region) ?? []
-      : Object.entries(FLY_REGIONS_VALUES).find(([key, region]) => region === project?.region) ?? []
+    project?.cloud_provider === 'K8S'
+      ? Object.entries(K8S_REGIONS_VALUES).find(([key, region]) => region === project?.region) ?? []
+      : []
   const region =
-    project?.cloud_provider === 'AWS'
-      ? AWS_REGIONS[regionKey as keyof typeof AWS_REGIONS]
-      : FLY_REGIONS[regionKey as keyof typeof FLY_REGIONS]
+    project?.cloud_provider === 'K8S' ? K8S_REGIONS[regionKey as keyof typeof K8S_REGIONS] : []
 
   return (
     <>
diff --git a/apps/studio/data/misc/get-default-region-query.ts b/apps/studio/data/misc/get-default-region-query.ts
index 31b0fbd..2ccea10 100644
--- a/apps/studio/data/misc/get-default-region-query.ts
+++ b/apps/studio/data/misc/get-default-region-query.ts
@@ -2,13 +2,7 @@ import { useQuery, UseQueryOptions } from '@tanstack/react-query'
 
 import type { ResponseError } from 'types'
 import { miscKeys } from './keys'
-import { COUNTRY_LAT_LON } from 'components/interfaces/ProjectCreation/ProjectCreation.constants'
-import { getDistanceLatLonKM } from 'lib/helpers'
-import {
-  AWS_REGIONS_COORDINATES,
-  FLY_REGIONS_COORDINATES,
-} from 'components/interfaces/Settings/Infrastructure/InfrastructureConfiguration/InstanceConfiguration.constants'
-import { AWS_REGIONS, FLY_REGIONS } from 'lib/constants'
+import { K8S_REGIONS, K8S_REGIONS_DEFAULT } from 'lib/constants'
 
 const RESTRICTED_POOL = ['WEST_US', 'CENTRAL_EU', 'SOUTHEAST_ASIA']
 
@@ -23,38 +17,7 @@ export async function getDefaultRegionOption({
 }: DefaultRegionVariables) {
   if (!cloudProvider) throw new Error('Cloud provider is required')
 
-  try {
-    const data = await fetch('https://www.cloudflare.com/cdn-cgi/trace').then((res) => res.text())
-    const locationCode: keyof typeof COUNTRY_LAT_LON = Object.fromEntries(
-      data.split('\n').map((item) => item.split('='))
-    )['loc']
-    const locLatLon = COUNTRY_LAT_LON[locationCode]
-
-    if (locLatLon === undefined) return undefined
-
-    const allRegions = cloudProvider === 'AWS' ? AWS_REGIONS_COORDINATES : FLY_REGIONS_COORDINATES
-    const locations = useRestrictedPool
-      ? Object.entries(allRegions)
-          .filter((x) => RESTRICTED_POOL.includes(x[0]))
-          .reduce((o, val) => ({ ...o, [val[0]]: val[1] }), {})
-      : allRegions
-
-    const distances = Object.keys(locations).map((reg) => {
-      const region: { lat: number; lon: number } = {
-        lat: locations[reg as keyof typeof locations][1],
-        lon: locations[reg as keyof typeof locations][0],
-      }
-      return getDistanceLatLonKM(locLatLon.lat, locLatLon.lon, region.lat, region.lon)
-    })
-    const shortestDistance = Math.min(...distances)
-    const closestRegion = Object.keys(locations)[distances.indexOf(shortestDistance)]
-
-    return cloudProvider === 'AWS'
-      ? AWS_REGIONS[closestRegion as keyof typeof AWS_REGIONS]
-      : FLY_REGIONS[closestRegion as keyof typeof FLY_REGIONS]
-  } catch (error) {
-    throw error
-  }
+  return K8S_REGIONS.MARS
 }
 
 export type DefaultRegionData = Awaited<ReturnType<typeof getDefaultRegionOption>>
diff --git a/apps/studio/lib/constants/infrastructure.ts b/apps/studio/lib/constants/infrastructure.ts
index 6107a01..f36e1df 100644
--- a/apps/studio/lib/constants/infrastructure.ts
+++ b/apps/studio/lib/constants/infrastructure.ts
@@ -1,40 +1,15 @@
 import type { components } from 'data/api'
 
-export type CloudProvider = 'FLY' | 'AWS'
-export type Region = typeof AWS_REGIONS | typeof FLY_REGIONS
-
-// Alias regions remain as the starting point for project creation
-// they are immediately translated to their respective cloud regions
-// and are afterward never referred to
-
-export const AWS_REGIONS = {
-  WEST_US: 'West US (North California)',
-  EAST_US: 'East US (North Virginia)',
-  CENTRAL_CANADA: 'Canada (Central)',
-  WEST_EU: 'West EU (Ireland)',
-  WEST_EU_2: 'West EU (London)',
-  // 'North EU': 'North EU',
-  CENTRAL_EU: 'Central EU (Frankfurt)',
-  SOUTH_ASIA: 'South Asia (Mumbai)',
-  SOUTHEAST_ASIA: 'Southeast Asia (Singapore)',
-  NORTHEAST_ASIA: 'Northeast Asia (Tokyo)',
-  NORTHEAST_ASIA_2: 'Northeast Asia (Seoul)',
-  OCEANIA: 'Oceania (Sydney)',
-  SOUTH_AMERICA: 'South America (São Paulo)',
-  // SOUTH_AFRICA: 'South Africa (Cape Town)',
-} as const
-
-export type AWS_REGIONS_KEYS = keyof typeof AWS_REGIONS
+export type CloudProvider = 'K8S'
+export type Region = typeof K8S_REGIONS
 
-export const FLY_REGIONS = {
-  SOUTHEAST_ASIA: 'Singapore',
+export const K8S_REGIONS = {
+  MARS: 'MARS-1',
 } as const
 
-export const AWS_REGIONS_DEFAULT =
-  process.env.NEXT_PUBLIC_ENVIRONMENT !== 'prod' ? AWS_REGIONS.SOUTHEAST_ASIA : AWS_REGIONS.WEST_US
+export type K8S_REGIONS_KEYS = keyof typeof K8S_REGIONS
 
-// TO DO, change default to US region for prod
-const FLY_REGIONS_DEFAULT = FLY_REGIONS.SOUTHEAST_ASIA
+export const K8S_REGIONS_DEFAULT = K8S_REGIONS.MARS
 
 export const PRICING_TIER_LABELS_ORG = {
   FREE: 'Free - $0/month',
@@ -50,22 +25,14 @@ export const PRICING_TIER_PRODUCT_IDS = {
   ENTERPRISE: 'tier_enterprise',
 }
 
-export const DEFAULT_PROVIDER: CloudProvider =
-  process.env.NEXT_PUBLIC_ENVIRONMENT !== 'prod' ? 'FLY' : 'AWS'
+export const DEFAULT_PROVIDER: CloudProvider = 'K8S'
 
 export const PROVIDERS = {
-  FLY: {
-    id: 'FLY',
-    name: 'Fly.io',
-    default_region: FLY_REGIONS_DEFAULT,
-    regions: { ...FLY_REGIONS },
-  },
-  AWS: {
-    id: 'AWS',
-    name: 'AWS',
-    DEFAULT_SSH_KEY: 'supabase-app-instance',
-    default_region: AWS_REGIONS_DEFAULT,
-    regions: { ...AWS_REGIONS },
+  K8S: {
+    id: 'K8S',
+    name: 'Kubernetes (self-hosted)',
+    default_region: K8S_REGIONS_DEFAULT,
+    regions: { ...K8S_REGIONS },
   },
 } as const
 
diff --git a/apps/studio/pages/integrations/vercel/[slug]/deploy-button/new-project.tsx b/apps/studio/pages/integrations/vercel/[slug]/deploy-button/new-project.tsx
index bc19bf6..7af4c27 100644
--- a/apps/studio/pages/integrations/vercel/[slug]/deploy-button/new-project.tsx
+++ b/apps/studio/pages/integrations/vercel/[slug]/deploy-button/new-project.tsx
@@ -18,7 +18,7 @@ import { useVercelProjectsQuery } from 'data/integrations/integrations-vercel-pr
 import { useOrganizationsQuery } from 'data/organizations/organizations-query'
 import { useProjectCreateMutation } from 'data/projects/project-create-mutation'
 import { useSelectedOrganization } from 'hooks'
-import { AWS_REGIONS, DEFAULT_MINIMUM_PASSWORD_STRENGTH, PROVIDERS } from 'lib/constants'
+import { K8S_REGIONS, DEFAULT_MINIMUM_PASSWORD_STRENGTH, PROVIDERS } from 'lib/constants'
 import { passwordStrength } from 'lib/helpers'
 import { getInitialMigrationSQLFromGitHubRepo } from 'lib/integration-utils'
 import { useIntegrationInstallationSnapshot } from 'state/integration-installation'
@@ -279,8 +279,8 @@ const CreateProject = () => {
             onChange={(region) => setDbRegion(region)}
             descriptionText="Select a region close to your users for the best performance."
           >
-            {Object.keys(AWS_REGIONS).map((option: string, i) => {
-              const label = Object.values(AWS_REGIONS)[i]
+            {Object.keys(K8S_REGIONS).map((option: string, i) => {
+              const label = Object.values(K8S_REGIONS)[i]
               return (
                 <Listbox.Option
                   key={option}
@@ -290,7 +290,7 @@ const CreateProject = () => {
                     <img
                       alt="region icon"
                       className="w-5 rounded-sm"
-                      src={`${router.basePath}/img/regions/${Object.keys(AWS_REGIONS)[i]}.svg`}
+                      src={`${router.basePath}/img/regions/${Object.keys(K8S_REGIONS)[i]}.svg`}
                     />
                   )}
                 >
diff --git a/apps/studio/pages/new/[slug].tsx b/apps/studio/pages/new/[slug].tsx
index 8e4ee88..6a6d197 100644
--- a/apps/studio/pages/new/[slug].tsx
+++ b/apps/studio/pages/new/[slug].tsx
@@ -28,11 +28,10 @@ import {
 import { useOrgSubscriptionQuery } from 'data/subscriptions/org-subscription-query'
 import { useCheckPermissions, useFlag, withAuth } from 'hooks'
 import {
-  AWS_REGIONS,
+  K8S_REGIONS,
   CloudProvider,
   DEFAULT_MINIMUM_PASSWORD_STRENGTH,
   DEFAULT_PROVIDER,
-  FLY_REGIONS,
   PROVIDERS,
   Region,
 } from 'lib/constants'
@@ -207,13 +206,8 @@ const Wizard: NextPageWithLayout = () => {
 
   // [Fran] Enforce APSE1 region on staging
   function getAvailableRegions(cloudProvider: CloudProvider): Region {
-    if (cloudProvider === 'AWS') {
-      return process.env.NEXT_PUBLIC_ENVIRONMENT === 'staging'
-        ? pluckObjectFields(AWS_REGIONS, ['SOUTHEAST_ASIA'])
-        : AWS_REGIONS
-      // to do - may need to pluck regions for staging for FLY also
-    } else if (cloudProvider === 'FLY') {
-      return FLY_REGIONS
+    if (cloudProvider === 'K8S') {
+      return K8S_REGIONS
     }
 
     throw new Error('Invalid cloud provider')
diff --git a/apps/studio/pages/vercel/setupProject.tsx b/apps/studio/pages/vercel/setupProject.tsx
index 4fa8bed..e01897f 100644
--- a/apps/studio/pages/vercel/setupProject.tsx
+++ b/apps/studio/pages/vercel/setupProject.tsx
@@ -18,7 +18,7 @@ import { Loading } from 'components/ui/Loading'
 import PasswordStrengthBar from 'components/ui/PasswordStrengthBar'
 import { useProjectCreateMutation } from 'data/projects/project-create-mutation'
 import {
-  AWS_REGIONS,
+  K8S_REGIONS,
   DEFAULT_MINIMUM_PASSWORD_STRENGTH,
   PRICING_TIER_PRODUCT_IDS,
   PROVIDERS,
@@ -286,8 +286,8 @@ const CreateProject = observer(() => {
             onChange={(region) => setDbRegion(region)}
             descriptionText="Select a region close to your users for the best performance."
           >
-            {Object.keys(AWS_REGIONS).map((option: string, i) => {
-              const label = Object.values(AWS_REGIONS)[i]
+            {Object.keys(K8S_REGIONS).map((option: string, i) => {
+              const label = Object.values(K8S_REGIONS)[i]
               return (
                 <Listbox.Option
                   key={option}
@@ -297,7 +297,7 @@ const CreateProject = observer(() => {
                     <img
                       alt="region icon"
                       className="w-5 rounded-sm"
-                      src={`${router.basePath}/img/regions/${Object.keys(AWS_REGIONS)[i]}.svg`}
+                      src={`${router.basePath}/img/regions/${Object.keys(K8S_REGIONS)[i]}.svg`}
                     />
                   )}
                 >
