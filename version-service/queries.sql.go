// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package main

import (
	"context"
)

const createNewVersion = `-- name: CreateNewVersion :one
INSERT INTO versions (service_id, image, tag, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, service_id, image, tag, created_at, created_by
`

type CreateNewVersionParams struct {
	ServiceID string
	Image     string
	Tag       string
	CreatedBy string
}

func (q *Queries) CreateNewVersion(ctx context.Context, arg CreateNewVersionParams) (Version, error) {
	row := q.db.QueryRow(ctx, createNewVersion,
		arg.ServiceID,
		arg.Image,
		arg.Tag,
		arg.CreatedBy,
	)
	var i Version
	err := row.Scan(
		&i.ID,
		&i.ServiceID,
		&i.Image,
		&i.Tag,
		&i.CreatedAt,
		&i.CreatedBy,
	)
	return i, err
}

const getVersions = `-- name: GetVersions :many
SELECT jsonb_object_agg(service_id, jsonb_build_object(
        'image', image,
        'tag', tag,
        'created_at', created_at,
        'created_by', created_by
    )) AS result
FROM (SELECT service_id,
             image,
             tag,
             created_at,
             created_by
      FROM versions v1
      WHERE created_at = (SELECT MAX(created_at)
                          FROM versions v2
                          WHERE v2.service_id = v1.service_id)) subquery
`

func (q *Queries) GetVersions(ctx context.Context) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getVersions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]byte
	for rows.Next() {
		var result []byte
		if err := rows.Scan(&result); err != nil {
			return nil, err
		}
		items = append(items, result)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVersionsForService = `-- name: GetVersionsForService :many
SELECT id, service_id, image, tag, created_at, created_by
FROM versions
WHERE service_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetVersionsForService(ctx context.Context, serviceID string) ([]Version, error) {
	rows, err := q.db.Query(ctx, getVersionsForService, serviceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Version
	for rows.Next() {
		var i Version
		if err := rows.Scan(
			&i.ID,
			&i.ServiceID,
			&i.Image,
			&i.Tag,
			&i.CreatedAt,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
